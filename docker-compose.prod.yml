version: '3.8'

services:
  # Laravel Application (Production)
  app:
    build:
      context: .
      target: production
    container_name: premier_league_app_prod
    restart: unless-stopped
    volumes:
      - storage_data:/var/www/html/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=https://your-domain.com
      - DB_HOST=database
      - DB_DATABASE=premier_league
      - DB_USERNAME=premier_league_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - database
      - redis
    networks:
      - premier_league_network

  # MySQL Database (Production)
  database:
    image: mysql:8.0
    container_name: premier_league_database_prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: premier_league
      MYSQL_USER: premier_league_user
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./docker/mysql/prod-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --query-cache-type=1
      --query-cache-size=64M
      --max-connections=200
    networks:
      - premier_league_network

  # Redis (Production)
  redis:
    image: redis:7-alpine
    container_name: premier_league_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - premier_league_network

  # Nginx Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: premier_league_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - premier_league_network

  # Queue Worker (for background jobs)
  queue-worker:
    build:
      context: .
      target: production
    container_name: premier_league_queue_worker
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --timeout=90
    volumes:
      - storage_data:/var/www/html/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=database
      - DB_DATABASE=premier_league
      - DB_USERNAME=premier_league_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - database
      - redis
    networks:
      - premier_league_network

  # Scheduler (for cron jobs)
  scheduler:
    build:
      context: .
      target: production
    container_name: premier_league_scheduler
    restart: unless-stopped
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    volumes:
      - storage_data:/var/www/html/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=database
      - DB_DATABASE=premier_league
      - DB_USERNAME=premier_league_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
    depends_on:
      - database
      - redis
    networks:
      - premier_league_network

volumes:
  mysql_prod_data:
  redis_prod_data:
  storage_data:
  nginx_logs:

networks:
  premier_league_network:
    driver: bridge 